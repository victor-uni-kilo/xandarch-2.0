import React, { createContext, FC, ReactNode, useEffect, useState } from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  IBilingualObject,
  IDashboardPagesMap,
  ILayoutState,
  IPagesMap,
  LayoutContext,
  LOCALE,
  localeEnum,
  SITE_AREA,
} from "types";
import { PAGE_LINKS, DASHBOARD_LINKS } from "../../constants/maps";

import GridLines from "../GridLines/GridLines";
import Navbar from "../Navbar/Navbar";

import styles from "./Layout.module.scss";

import { useDispatch, useSelector } from "react-redux";
import { selectPage, setLocaleKey, setPageTitle, setSiteArea } from "store/pageSlice";

// const initFormState: ILayoutState = {
//   dynamicPageTitle: null,
//   localeKey: "en",
//   siteArea: SITE_AREA.presentation,
// };

interface ILayoutProps {
  children: ReactNode;
}

export const PageLayoutContext = createContext<LayoutContext | null>(null);

const Layout: FC<ILayoutProps> = ({ children }) => {
  const dispatch = useDispatch();
  const pageData = useSelector(selectPage);
  console.log("PAGE_DATA: ", pageData);

  const router = useRouter();
  const currentRoute = router.pathname;
  const currentLocale = router.locale;
  /////
  const cmsPath = new RegExp("/dashboard");
  const is404 = /\/404/.test(currentRoute);
  const isDynamicRoute = /\[/.test(currentRoute);
  /////
  const currentSiteArea = cmsPath.test(currentRoute) ? SITE_AREA.cms : SITE_AREA.presentation;

  let pageTitle: string | null | undefined;

  switch (is404) {
    case true:
      pageTitle = "Not Found";
      break;
    default:
      switch (isDynamicRoute) {
        case true:
          pageTitle = pageData.pageTitle;
          break;
        default:
          switch (currentSiteArea) {
            case SITE_AREA.cms:
              pageTitle = DASHBOARD_LINKS.find(pageProps => pageProps.href === currentRoute)?.text;
              break;
            default:
              pageTitle = PAGE_LINKS.find(pageProps => pageProps.href === currentRoute)?.text[
                currentLocale as keyof IBilingualObject
              ];
              break;
          }
          break;
      }
      break;
  }

  useEffect(() => {
    dispatch(setSiteArea(currentSiteArea));
    dispatch(setLocaleKey(currentLocale));
    dispatch(setPageTitle(pageTitle));
  }, [currentRoute, currentLocale]);

  return (
    <>
      <Head>
        <title>{`XANDarch | ${pageData.pageTitle}`}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="shortcut icon" href="/images/favicon.ico" type="image/x-icon" />
      </Head>

      <div className={styles.wrapper}>
        <Navbar
          currentRoute={currentRoute}
          siteArea={pageData.siteArea}
          localeKey={pageData.localeKey as localeEnum}
        />
        <main className={styles.main}>{children}</main>
        <GridLines />
      </div>
    </>
  );
};

export default Layout;
