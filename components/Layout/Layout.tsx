import React, { createContext, FC, ReactNode, useState } from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import { IPagesMap, LayoutContext } from "types";
import { PAGE_LINKS, DASHBOARD_LINKS } from "../../constants/maps";

import GridLines from "../GridLines/GridLines";
import Navbar from "../Navbar/Navbar";

import styles from "./Layout.module.scss";

import { SITE_AREA } from "types";

interface ILayoutProps {
  children: ReactNode;
}

export const PageLayoutContext = createContext<LayoutContext>(null);

const Layout: FC<ILayoutProps> = ({ children }) => {
  const [dynamicPageTitle, setDynamicPageTitle] = useState("");

  const router = useRouter();
  const currentRoute = router.pathname;

  const cmsPath = new RegExp("/dashboard");
  const siteArea = cmsPath.test(currentRoute) ? SITE_AREA.cms : SITE_AREA.presentation;

  const is404 = /\/404/.test(currentRoute);
  const isDynamicRoute = /\[/.test(currentRoute);

  const findPageTitle = (pageMap: IPagesMap[], route: string) => {
    console.log(pageMap, route);

    return pageMap.find(pageProps => pageProps.href === route)?.text;
  };
  console.log("pageTitle", findPageTitle(PAGE_LINKS, currentRoute));

  let pageTitle;

  switch (is404) {
    case true:
      pageTitle = "Not Found";
      break;
    default:
      switch (isDynamicRoute) {
        case true:
          pageTitle = dynamicPageTitle;
          break;
        default:
          switch (siteArea) {
            case SITE_AREA.presentation:
              pageTitle = findPageTitle(PAGE_LINKS, currentRoute);
              break;
            case SITE_AREA.cms:
              pageTitle = findPageTitle(DASHBOARD_LINKS, currentRoute);
              break;
            default:
              console.log("Catch all this");
              break;
          }
          break;
      }
      break;
  }

  const queryArray = currentRoute.split("/");

  console.log("queryArray", queryArray);

  console.log("currentRoute", currentRoute);
  console.log("routerQuery", JSON.stringify(router.query));

  console.log("router", router);
  console.log("is404", is404);

  return (
    <>
      <PageLayoutContext.Provider value={[dynamicPageTitle, setDynamicPageTitle]}>
        <Head>
          <title>{`XANDarch | ${pageTitle}`}</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="shortcut icon" href="/images/favicon.ico" type="image/x-icon" />
        </Head>

        <div className={styles.wrapper}>
          {!is404 && (
            <Navbar
              PAGE_LINKS={siteArea === SITE_AREA.presentation ? PAGE_LINKS : DASHBOARD_LINKS}
              currentRoute={currentRoute}
            />
          )}
          <main className={styles.main}>{children}</main>
          <GridLines />
        </div>
      </PageLayoutContext.Provider>
    </>
  );
};

export default Layout;
