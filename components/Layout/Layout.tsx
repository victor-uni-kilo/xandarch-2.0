import React, { createContext, FC, ReactNode, useEffect, useState } from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import { IBilingualObject, ILayoutState, IPagesMap, LayoutContext, LOCALE, SITE_AREA } from "types";
import { PAGE_LINKS, DASHBOARD_LINKS } from "../../constants/maps";

import GridLines from "../GridLines/GridLines";
import Navbar from "../Navbar/Navbar";

import styles from "./Layout.module.scss";

const initFormState: ILayoutState = {
  dynamicPageTitle: null,
  localeKey: "en",
  siteArea: SITE_AREA.presentation,
};

interface ILayoutProps {
  children: ReactNode;
}

export const PageLayoutContext = createContext<LayoutContext | null>(null);

const Layout: FC<ILayoutProps> = ({ children }) => {
  const [layoutState, setLayoutState] = useState(initFormState);

  const router = useRouter();
  const currentRoute = router.pathname;

  const cmsPath = new RegExp("/dashboard");

  const is404 = /\/404/.test(currentRoute);
  const isDynamicRoute = /\[/.test(currentRoute);
  const currentLocale = router.locale === LOCALE.sr ? LOCALE.sr : LOCALE.en;

  useEffect(() => {
    const currentSiteArea = cmsPath.test(currentRoute) ? SITE_AREA.cms : SITE_AREA.presentation;
    setLayoutState({ ...layoutState, localeKey: currentLocale, siteArea: currentSiteArea });
  }, [currentLocale]);

  const findPageTitle = (pageMap: IPagesMap[], route: string, locale: string) => {
    console.log(pageMap, route);

    return pageMap.find(pageProps => pageProps.href === route)?.text[
      locale as keyof IBilingualObject
    ];
  };

  let pageTitle;
  switch (is404) {
    case true:
      pageTitle = "Not Found";
      break;
    default:
      switch (isDynamicRoute) {
        case true:
          pageTitle =
            layoutState.dynamicPageTitle && layoutState.dynamicPageTitle[layoutState.localeKey];
          break;
        default:
          switch (layoutState.siteArea) {
            case SITE_AREA.presentation:
              pageTitle = findPageTitle(PAGE_LINKS, currentRoute, layoutState.localeKey);
              break;
            case SITE_AREA.cms:
              pageTitle = findPageTitle(DASHBOARD_LINKS, currentRoute, layoutState.localeKey);
              break;
            default:
              console.log("Catch all this");
              break;
          }
          break;
      }
      break;
  }

  console.log("LAYOUT STATE:", layoutState);
  console.log("PageTitle:", pageTitle);
  console.log("SHOW LOCALE:", router.locale, typeof router.locale, router);
  console.log("Current LOCALE:", currentLocale);

  return (
    <>
      <PageLayoutContext.Provider value={[layoutState, setLayoutState]}>
        <Head>
          <title>{`XANDarch | ${pageTitle}`}</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="shortcut icon" href="/images/favicon.ico" type="image/x-icon" />
        </Head>

        <div className={styles.wrapper}>
          {!is404 && <Navbar currentRoute={currentRoute} siteArea={layoutState.siteArea} />}
          <main className={styles.main}>{children}</main>
          <GridLines />
        </div>
      </PageLayoutContext.Provider>
    </>
  );
};

export default Layout;
